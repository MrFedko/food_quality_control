import asyncio
import os
import random
from datetime import datetime, timedelta
from aiogram.exceptions import TelegramRetryAfter, TelegramAPIError


class Watcher:
    def __init__(self, database, bot):
        self.database = database
        self.bot = bot
        self.messages = {
    0: "üïõ –ü–æ–ª–¥–µ–Ω—å –Ω–∞—Å—Ç–∞–ª! –í—Å–ø–æ–º–Ω–∏—Ç–µ –æ –∫–æ–Ω—Ç—Ä–æ–ª–µ –∫–∞—á–µ—Å—Ç–≤–∞, –∞ —Ç–µ, –∫—Ç–æ –Ω–µ –Ω–∞ —Å–º–µ–Ω–µ ‚Äì –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–ª—ã–º–∏ –Ω–æ—á–∞–º–∏ –∏–ª–∏ —Ö–æ—Ç—è –±—ã –±–µ–ª—ã–º —Ö–ª–µ–±–æ–º üòâ.",
    1: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –≤–Ω–µ—Å–∏—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—å, –∞ –µ—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞ —Å–º–µ–Ω–µ ‚Äì –ø—Ä–æ–≥—É–ª—è–π—Ç–µ—Å—å –≤–¥–æ–ª—å –ù–µ–≤—ã –∏ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ üåä.",
    2: "–ú–µ–Ω–µ–¥–∂–µ—Ä—ã, –ø–æ—Ä–∞ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –±–ª—é–¥–∞ ‚Äì –≤–¥—Ä—É–≥ –æ–Ω–∏ —Ç–æ—Å–∫—É—é—Ç –±–µ–∑ –≤–∞—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏? –ê –∫—Ç–æ –æ—Ç–¥—ã—Ö–∞–µ—Ç ‚Äì –ø—É—Å—Ç—å –æ—Ç–¥—ã—Ö–∞–µ—Ç —Å–æ –≤–∫—É—Å–æ–º ‚òï.",
    3: "–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤! –ê –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Å–≤–æ–±–æ–¥–µ–Ω ‚Äì –∂–µ–ª–∞–µ–º –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞, –∫–∞–∫ –≤ –≠—Ä–º–∏—Ç–∞–∂–µ üé®.",
    4: "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∫–æ–Ω—Ç—Ä–æ–ª–µ –∫–∞—á–µ—Å—Ç–≤–∞! –ö—Ç–æ –Ω–µ –Ω–∞ —Å–º–µ–Ω–µ ‚Äì –ø—É—Å—Ç—å –Ω–∞—Å–ª–∞–∂–¥–∞–µ—Ç—Å—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π –ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞ –∏ –∑–≤—É–∫–∞–º–∏ –¥–æ–∂–¥—è üåßÔ∏è.",
    5: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –≤–Ω–µ—Å–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ê –µ—Å–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π ‚Äì –ø–æ–∂–µ–ª–∞–π—Ç–µ —Å–µ–±–µ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ —á–∞–µ–ø–∏—Ç–∏—è –ø–æ–¥ —á—Ç–µ–Ω–∏–µ –î–æ—Å—Ç–æ–µ–≤—Å–∫–æ–≥–æ üìñ.",
    6: "–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ –∂–¥—ë—Ç! –ê —Å–≤–æ–±–æ–¥–Ω—ã–º –æ—Ç —Å–º–µ–Ω—ã –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≥—É–ª–∫—É –ø–æ –º–æ—Å—Ç–∞–º (—Ä–∞–∑–≤–µ–¥—ë–Ω–Ω—ã–º –∏–ª–∏ –Ω–µ—Ç ‚Äì —Ä–µ—à–∞—Ç—å –≤–∞–º) üåâ.",
    7: "–ú–µ–Ω–µ–¥–∂–µ—Ä—ã, –ø—Ä–æ–¥—É–∫—Ç—ã –∂–¥—É—Ç –≤–Ω–∏–º–∞–Ω–∏—è. –ö—Ç–æ –æ—Ç–¥—ã—Ö–∞–µ—Ç ‚Äì –ø—É—Å—Ç—å –Ω–∞–±–µ—Ä—ë—Ç—Å—è —Å–∏–ª –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è, –≤–µ–¥—å —ç—Ç–æ —Ç–æ–∂–µ —á–∞—Å—Ç—å –∫–∞—á–µ—Å—Ç–≤–∞ ‚ú®.",
    8: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ —Å–ø–∏—Ç. –ê –¥–ª—è –æ—Ç–¥—ã—Ö–∞—é—â–∏—Ö ‚Äì –∂–µ–ª–∞–µ–º –ª–µ–Ω–∏–≤–æ–≥–æ —É—Ç—Ä–∞ –∏ –∏–Ω—Ç–µ–ª–ª–∏–≥–µ–Ω—Ç–Ω–æ–≥–æ –±–µ–∑–¥–µ–ª—å—è ‚òïüõãÔ∏è.",
    9: "–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∏–π –ø–æ–ª–¥–µ–Ω—å –Ω–∞—Å—Ç–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã! –ê —Ç–µ–º, –∫—Ç–æ –≤–Ω–µ —Å–º–µ–Ω—ã, ‚Äì –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞ –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å—Ç—Ä–µ—á–∏ —Å –ú—É–∑–æ–π üé∂."
}

    async def run_loop(self):
        while True:
            now = datetime.now()
            next_run = now.replace(hour=18, minute=20, second=0, microsecond=0)
            if next_run <= now:
                next_run += timedelta(days=1)
            wait_seconds = (next_run - now).total_seconds()

            await asyncio.sleep(wait_seconds)
            await self.send_messages()

    async def send_messages(self):
        data = self.database.get_managers()
        await self.bot.send_message(os.getenv("ADMIN_ID"), f"Watcher: started, managers={len(data)}")

        if not data:
            await self.bot.send_message(os.getenv("ADMIN_ID"), "Watcher: no managers found")
            return

        for user in data:
            message = random.choice(list(self.messages.values()))
            success = False
            while not success:
                try:
                    await self.bot.send_message(user["user_tg_id"], message)
                    success = True
                except TelegramRetryAfter as e:
                    await asyncio.sleep(e.retry_after)
                except TelegramAPIError as e:
                    await self.bot.send_message(os.getenv("ADMIN_ID"),
                                                f"[!] User {user['user_tg_id']} not notified: {e}")
                    success = True
                except Exception as e:
                    await self.bot.send_message(os.getenv("ADMIN_ID"),
                                                f"[!] Unexpected error for user {user['user_tg_id']}: {e}")
                    success = True
            await asyncio.sleep(0.3)

        await self.bot.send_message(os.getenv("ADMIN_ID"), "Watcher: all messages sent successfully")
